#!/bin/bash

# thanks to https://stackoverflow.com/questions/22009364/is-there-a-try-catch-command-in-bash and https://stackoverflow.com/questions/30466807/how-to-get-the-current-git-branch-in-shell

# verify that user is not trying to commit to master or develop
function checkBranches()
{
if test "$(git rev-parse --abbrev-ref HEAD)" == $1; then
  echo "Oops, you are on the $1 branch. Please switch branches before you commit." >&2
  git reset HEAD . && exit 1;
fi
}

forbiddenBranches=(master develop)

for i in "${forbiddenBranches[@]}"
do
  checkBranches "$i"
done

exec 1>&2
exec < /dev/tty

# check for potentially problematic code that shouldn't be commited
function checkWarnings()
{
  if test $(git diff --cached | grep $1 | wc -l) != 0
then
  exec git diff --cached | grep -ne $1
  read -p "Warning: $1. Continue? y/n" yn
  echo $yn | grep ^[Yy]$
  if [ $? -eq 0 ]
  then
    echo 'Ok, continuing.';
  else
    git reset HEAD . && exit 1;
  fi
fi
}

warnings=('^\+.*console\.log(' 'debugger' 'HEAD' 'only' 'draft' 'dummy' 'revert')

for i in "${warnings[@]}"
do
  checkWarnings "$i"
done

# run npm commands like lint and test against the changes to be potentially committed
function checkNpmCommands()
{
  {
      $1
  } || {
    echo "'$1' failed."
    git reset HEAD . && exit 1;
  }
}

npmCommands=('npm run lint' 'npm run test')

for i in "${npmCommands[@]}"
do
  checkNpmCommands "$i"
done
