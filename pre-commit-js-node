#!/bin/bash

# thanks to https://stackoverflow.com/questions/22009364/is-there-a-try-catch-command-in-bash and https://stackoverflow.com/questions/30466807/how-to-get-the-current-git-branch-in-shell

if test "$(git rev-parse --abbrev-ref HEAD)" == develop; then
  echo Oops, you are on the develop branch. Please switch branches before you commit. >&2
  git reset HEAD . && exit 1;
fi

if test "$(git rev-parse --abbrev-ref HEAD)" == master; then
  echo Oops, you are on the master branch. Please switch branches before you commit. >&2
  git reset HEAD . && exit 1;
fi

exec 1>&2
exec < /dev/tty

function checkWarnings()
{
  if test $(git diff --cached | grep $1 | wc -l) != 0
then
  exec git diff --cached | grep -ne $1
  read -p "Warning: $1. Continue? y/n" yn
  echo $yn | grep ^[Yy]$
  if [ $? -eq 0 ]
  then
    echo 'Ok, continuing.';
  else
    git reset HEAD . && exit 1;
  fi
fi
}

warnings=('^\+.*console\.log(' 'debugger' 'HEAD' 'only' 'draft' 'dummy' 'revert')

for i in "${warnings[@]}"
do
  checkWarnings "$i"
done

{
    npm run lint
} || {
  git reset HEAD . && exit 1;
}

{
    npm run test
} || {
  git reset HEAD . && exit 1;
}

# {
#     npm run flow
# } || {
#   git reset HEAD . && exit 1;
# }
