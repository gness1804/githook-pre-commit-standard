#!/bin/bash

# thanks to https://stackoverflow.com/questions/22009364/is-there-a-try-catch-command-in-bash and https://stackoverflow.com/questions/30466807/how-to-get-the-current-git-branch-in-shell

function resetAndExit()
{
  git reset HEAD . && exit 1;
}

# verify that user is not trying to commit to master or develop
function checkBranches()
{
if test "$(git rev-parse --abbrev-ref HEAD)" == $1; then
  echo "Oops, you are on the $1 branch. Please switch branches before you commit." >&2
  resetAndExit
fi
}

forbiddenBranches=(master develop)

for i in "${forbiddenBranches[@]}"
do
  checkBranches "$i"
done

exec 1>&2
exec < /dev/tty

function checkFakes()
{
  if test $(find .  | grep -E -v 'node_modules|\/\.' | grep -c '.fake.') != 0
  then
    read -p "Warning: there is a file named '*.fake.*'. Continue? y/n" yn
    echo $yn | grep ^[Yy]$
    if [ $? -eq 0 ]
    then
      echo 'Ok, continuing.';
    else
      resetAndExit
    fi
  fi
}


checkFakes

# check for potentially problematic code that shouldn't be commited
function checkWarnings()
{
  if test $(git diff --cached | grep $1 | wc -l) != 0
then
  exec git diff --cached | grep -ne $1
  read -p "Warning: $1. Continue? y/n" yn
  echo $yn | grep ^[Yy]$
  if [ $? -eq 0 ]
  then
    echo 'Ok, continuing.';
  else
    resetAndExit
  fi
fi
}

warnings=('^\+.*console\.log(' 'debugger' 'HEAD' 'it.only' 'describe.only' 'draft' 'dummy' 'revert' 'TODO')

for i in "${warnings[@]}"
do
  checkWarnings "$i"
done

# check for comments
function checkComments()
{
  if test $(git diff --cached | grep '$1' | wc -l) != 0
  then
    read -p "Warning: comment. Continue? y/n" yn
    echo $yn | grep ^[Yy]$
  if [ $? -eq 0 ]
  then
    echo 'Ok, continuing.';
  else
    resetAndExit
  fi
fi
}

comments=('//')

# run npm commands like lint and test against the changes to be potentially committed
function checkNpmCommands()
{
  {
      $1
  } || {
    echo "'$1' failed."
    resetAndExit
  }
}

npmCommands=('npm run lint' 'npm run test')

for i in "${npmCommands[@]}"
do
  checkNpmCommands "$i"
done
